로그스태시
로그란 컴퓨터 시스템에서 시스템의 일련의 동작을 기록하는 것으로 로그는 성능, 오류, 동작 과정 등의 중요한 정보를 담고 있다.
로그는 형태가 표준화되어 있지 않기 때문에 로그 생산자는 제각각 다양한 방법으로 로그를 생성한다.
로그라는 것은 반정형(완벽하게 일치하지는 않더라도 어느 정도 형태가 있는) 데이터이며 세상의 모든 것이 로그가 될 수 있기 때문에
로그를 강제할 방법도 없기 때문에 로그를 수집하는 쪽에서 로그의 형태를 분석하고 시스템이 인식할 수 있도록 정제하는 작업이 
필요한데 로그스태시는 로그를 수집해서 가공하고 전송하는 일련의 과정을 간편하게 구현하기 위한 기능을 제공한다.

로그스태시는 플러그인 기반의 오픈 소스 데이터 처리 파이프라인 도구이다.
다소 복잡하고 귀찮은 데이터 전처리 과정을 별도의 애플리케이션 작성 없이 비교적 간단한 설정만으로 수행할 수 있다.
데이터를 저장하기 전에 사용자가 원하는 형태로 변경할 수 있는 기능을 제공한다.

로그스태시 실행
로그스태시가 설치된 폴더 아래 bin 폴더의 logstash.bat 파일을 실행하면 된다.
로그스태시를 실행하기 위해서는 반드시 파이프라인 설정이 필요하다.
파이프라인은 별도의 설정 파일을 만들어 기록하거나 config 폴더의 pipelines.yml 파일에 기록한다.

-e 옵션을 사용하면 콘솔에서 직접 파이프라인을 설정할 수 있다.
운영체제의 표준 입력(stdin)으로 전달받은 메시지를 표준 출력(stdout)으로 표시한다.
--log.level error은 로그 중 error 레벨 미만의 로그를 감추는 설정이다.
.\bin\logstash.bat -e "input { stdin {} } output { stdout {} }" --log.level error

실행중인 로그스태시는 ctrl + C를 누르면 종료된다.

파이프라인
로그스태시에서 가장 중요한 부분으로 데이터를 입력받아 실시간으로 변경하고 이를 다른 시스템에 전달한다.
파이프라인은 입력, 출력은 필수 구성 요소, 필터는 선택사항 이고 각 단계에서 여러개의 플러그인을 포함 시킬 수 있다.
source data => logstash pipeline(input => filter => output) => elastic search

파이프라인 형식
input {
  {
    입력 플러그인(stdin, file, syslog, kafka, jdbc, ...)
  }
}

filter {
  {
    필터 플러그인(grok, dissect, mutate, date, ...)
  }
}

output {
  {
    출력 플러그인(stdout, elasticsearch, file, kafka, ...)
  }
}

config 폴더에 logstash-test.conf 라는 이름의 설정 파일을 만든다.
입력으로 file 플러그인, 출력으로 stdout 플러그인을 사용했다.
path 옵션은 읽어들일 파일의 위치를 지정한다. 파일에 로그가 쌓이면 실시간으로 파일의 변경된 부분을 감지해 읽어들인다.
start_position 옵션은 최초로 파일을 발견했을 때 파일을 읽을 위치를 지정한다.

=======================================================================================================
logstash-test.conf 파일의 내용
=======================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/elasticsearch-7.17.14/logs/elasticsearch.log"
    start_position => "beginning"
  }
}

output {
  stdout { }
}
=======================================================================================================

-f 옵션은 logstash-test.conf 파일을 파이프라인 설정에 사용한다는 의미이다.
.\bin\logstash.bat -f .\config\logstash-test.conf --log.level error

필터
입력 플러그인이 받은 데이터를 의미있는 데이터로 구조화하는 역할을 한다.
필수 구성요소가 아니어서 필터 없이 파이프라인을 구성할 수 있지만 필터가 없는 파이프라인은 기능을 온전히 발휘하지 못한다.

실습을 위한 간단한 예제 로그 파일(filter-example.log)을 만든다.
=======================================================================================================
filter-example.log 파일의 내용
=======================================================================================================
[2023-11-01 12:52:12] [ID1] 192.168.0.7 9500 [INFO] - connected.
[2023-11-01 12:58:47]   [ID2] 218.35.17.184 1004 [warn] - busy server
=======================================================================================================

=======================================================================================================
logstash-test.conf 파일의 내용 수정
path 옵션 수정, sincedb_path 옵션 추가
sincedb_path 옵션 값을 "nul"로 지정하면 sincedb 데이터베이스 파일을 만들지 않기 때문에 이전 파일을 읽었던 기록이 없어서
매번 로그스태시를 실행할 때 마다 처음부터 파일을 읽는다.
sincedb 데이터베이스 파일은 파일을 어디까지 읽었나 기록하는 파일이다.
=======================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/logstash-7.17.14/filter-example.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

output {
  stdout { }
}
=======================================================================================================

.\bin\logstash.bat -f .\config\logstash-test.conf --log.level error

mutate 필터 - 문자열 자르기(split)
데이터나 로그는 대부분 길이가 길기때문에 우리가 원하는 형태로 분리해야 한다.

=======================================================================================================
logstash-test.conf 파일의 내용 수정
filter 추가
=======================================================================================================
input {
  file {
    path => "C:/k_digital/elasticStack/logstash-7.17.14/filter-example.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

filter {
  mutate {
    split => {"message" => " "}
  }
}

output {
  stdout { }
}
=======================================================================================================





















