비츠
비츠는 고(go) 프로그래밍 언어로 작성된 가볍고 사용하기 쉬운 데이터 수집기이다.
비츠는 설정이 간편하고 별도의 데이터 가공을 위한 프로그래밍 작업이 필요하지 않으므로 원하는 비트를 확보했다면
빠르게 데이터를 수집할 수 있다.

비트는 가벼운 프로그램을 지향하기 때문에 하나의 목적만을 수행한다. 비트는 목적별로 다양한 비트들이 존재한다.
데이터를 수집하는 데 특화되어 있는데, 데이터를 수집하는 역할만 보면 로그스태시와 유사해 보일 수 있으나 차이가 있겠다.
로그스태시는 다양한 플러그인을 포함하는 범용성이 높은 만큼 무겁게 움직이는 반면, 비트는 범용성을 포기하고 특정 목적만
수행하도록 가볍게 구성되어 어플리케이션의 성능에 영향을 미치지 않고 필요한 이벤트를 수집할 수 있다.

그렇다고 이벤트 가공을 완전히 지원하지 않는 것도 아니므로 간단한 수집이라면 로그스태시 보다 비트를 쓰는 것이 성능상 유리하다.
좀 더 전문적이고 범용적인 대량의 이벤트 가공이 필요하다면 로그스태시 더 적합하다.

비트에서 수집한 데이터는 엘라스틱서치로 바로 보내거나 각 비트에서 발생된 다량의 이벤트들을 로그스태시에서 일괄적으로 
가공 처를를 거쳐 엘라스틱서치로 보낸다.

비트 종류
파일 비트: 로그 파일을 실시간으로 읽어들여 전송한다. 가장 많이 사용된다.
하트 비트: 서비스가 살아있는지 확인하고 모니터링 한다.
메트릭 비트: 통계 지표를 수집한다.
패킷 비트: 네트워크 패킷 분석기로 네트워크 데이터를 수집한다.
오딧 비트: 리눅스의 시스템 보안 정보를 검사하는 auditd에서 생성하는 로그를 수집한다.
저널 비트: 리눅스의 systemd로 실행되는 서비스들에 대한 로그를 수집한다.
펑션 비트: 클라우드 서버리스 환경에서 사용할 수 있고 아마존의 큐 데이터 등을 수집한다.
윈로그 비트: 윈도우에서 발생하는 이벤트 로그를 수집한다.

비트 설치
엘라스틱서치에서 제공하는 비트와 사용자가 직접 만든 비트의 설치 방법이 조금씩 다르다.
엘라스틱서치에서 제공하는 비트는 https://www.elastic.co/kr/downloads/beats에서 다운로드 할 수 있다.
엘라스틱서치가 제공하지 않는 기능은 사용자들이 만든 비트(커스텀 비트)를 온라인 공식 문서에서 다운받아 사용하면 된다.
https://www.elastic.co/guide/en/beats/libbeat/7.17/community-beats.html

1. 비트를 다운로드 한다.
2. 비트 설정 파일을 수정한다.
3. 엘라스틱서치와 키바나 대시보드를 사용할 수 있게 설정한다.
4. 비트를 실행한다.
5. 키바나 대시보드에서 데이터를 확인한다.

비트를 실행하기 위한 필수적인 단계는 파일을 다운로드하고 설정 파일을 수정하고 실행하는 1, 2, 4번 단계로 구성된다.
키바나에서 비트 대시보드나 시각화를 이용하려면 3, 5번이 필요하다.

======================================================================================================================

파일 비트
로그 파일을 쉽게 수집하도록 도와주며 궁극적으로 엘라스틱서치와 키바나를 이용해 로그를 추적하고 통계를 만들어 활용할 수 
있게 도와준다. go 언어로 작성되어 JVM 같은 무거운 라이브러리가 따로 필요하지 않아서 가볍기 때문에 수집할 시스템에
부담 없이 설치될 수 있다. 그리고 로그스태시 처럼 간단한 필터 작업도 가능하다.

파일 비트 구성요소
입력(input): 하베스터에 대한 입력 소스를 정한다.
하베스터(harvester): 입력에 명시된 파일을 직접 수집하는 주체이다.
스풀러(spooler): 하베스터가 수집한 이벤트를 엘라스특서치나 로그스태시로 전달한다.

파일 비트를 다운로드했으면 원하는 로그 파일을 수집하기 위해 설정 파일(filebeat.yml)을 수정해야 한다.
설정 파일 작성 방법은 로그스태시와 비슷해 보이지만 플러그인을 통해 입력, 필터, 출력을 설정하는 로그스태시와 달리
파일 비트는 복잡한 설정이 없다.

======================================================================================================================
filebeat.yml 파일의 내용
파일 비트 input 온라인 문서
https://www.elastic.co/guide/en/beats/filebeat/7.17/configuration-filebeat-options.html#filebeat-input-types
파일 비트 output 온라인 문서
https://www.elastic.co/guide/en/beats/filebeat/7.17/configuring-output.html

인풋 타입은 filestream으로 설정했는데 filestream 타입은 paths에 지정된 파일의 로그를 한 줄씩 가져온다.
setup.kibana를 지정하면 키바나 대시보드에서 파일 비트 데이터를 확인할 수 있다.
엘라스틱서치를 아웃풋으로 지정하면 반드시 엘라스틱서치의 호스트 주소를 적어줘야 한다.
======================================================================================================================
# ============================== Filebeat inputs ===============================
filebeat.inputs:
- type: filestream
  id: my-filestream-id
  enabled: true
  paths:
    - C:/k_digital/elasticStack/elasticsearch-7.17.14/logs/*.log

# =================================== Kibana ===================================
setup.kibana:
  host: "localhost:5601"

# ================================== Outputs ===================================
output.elasticsearch:
  hosts: ["localhost:9200"]
======================================================================================================================

파일 비트를 실행하기 전에 setup 옵션을 실행한다. -e 옵션은 모니터에 오류나 로그를 보여준다.
엘라스틱서치 인덱스 템플린, 수명주기 정책과 같은 인덱스 관리 정보와 인제스트 파이프라인, 그리고 키바나 샘플 대시보드까지
설치하기 때문에 최초에 setup 하는데 시간이 좀 걸린다.
마지막 로그인 Loaded Ingest pipelines까지 보이면 setup이 완료된 것이다.
setup이 완료되고 키바나에 가보면(햄버거 버튼 => Analytics => Dashboard) 파일 비트에 관련된 부분이 추가된 것을 확인할 수 있다.
======================================================================================================================
filebeat.exe setup -e
======================================================================================================================

파일 비트와 엘라스틱서치, 키바나 간의 setup이 끝나면 파일 비트를 실행한다.
======================================================================================================================
filebeat.exe -e
======================================================================================================================
파일 비트가 실행되면 키바나 메뉴의 햄버거 버튼 => Management => Stack Management를 선택하고 Management 메뉴에서
Index Management를 클릭하면 Index Management 창에 filebeat-*라는 이름의 인덱스가 보인다.
로그를 직접 확인해 보려면 키바나 메뉴의 햄버거 버튼 => Analytics => Discover를 클릭하고 인덱스 패턴을 filebeat-*을
클릭하면 파일 비트로 읽은 로그 데이터를 확인할 수 있다.

======================================================================================================================

파일 비트 유용한 설정
파일 비트 설정 파일을 수정해보자.
파일 비트를 설치한 폴더를 보면 filebeat.reference.yml이라는 파일이 있다.
파일 비트의 모든 설정에 대한 설명과 기본값이 적혀있는 참조 파일이다. 버전에 맞춰 추가, 삭제된 옵션이 모두 포함되어 있으니
설정 파일을 수정할 때 참고한다.

======================================================================================================================
filebeat.yml 파일의 내용
ignore_older: 오래된 파일은 읽어들이지 않고 무시하기
기본값은 0으로 파일의 생성, 수정 시간과 무관하게 모든 내용을 읽어들인다.
ignore_older 값은 2h(2시간), 5m(5분) 처럼 타임스트랑 형식으로 작성한다.
======================================================================================================================
filebeat.inputs:
- type: filestream
  id: my-filestream-id
  enabled: true
  paths:
    - C:/k_digital/elasticStack/elasticsearch-7.17.14/logs/*.log
  ignore_older: 24h
======================================================================================================================

======================================================================================================================
filebeat.yml 파일의 내용
특정 라인 추가, 제외하기 및 특정 파일 제외하기
파일 비트 수준에서는 복잡한 정제 작업을 수행할 수는 없지만, 간단한 정제 작업을 파일 비트에서 처리하면 엘라스틱서치나
로그스태시에서 처리하는 작업량을 줄일 수 있다.
exclude_lines는 특정 라인을 정규식을 이용해 필터링하고 매칭된 라인은 파일 비트에서 수집하지 않는다.
include_lines는 특정 라인을 정규식을 이용해 필터링하고 매칭된 라인만 파일 비트에서 수집한다.
prospector.scanner.exclude_files는 패턴에 일치하는 파일을 무시한다.
======================================================================================================================
filebeat.inputs:
- type: filestream
  id: my-filestream-id
  enabled: true
  paths:
    - C:/k_digital/elasticStack/elasticsearch-7.17.14/logs/*.log
  exclude_lines: ['^DBG']
  include_lines: ['^ERR', '^WARN']
  prospector.scanner.exclude_files: ['.gz$']
======================================================================================================================

======================================================================================================================
filebeat.yml 파일의 내용
멀티라인 로그 처리
파일 비트는 멀티라인 옵션을 제공한다.
일반적으로 로그는 한 줄에 하나의 로그가 기록되며, 파일 비트 또한 기본적으로 싱글 라인 단위로 이벤트를 처리한다.
경우에 따라 하나의 로그가 여러 줄에 걸쳐서 기록되는 경우가 있는데, 이 때 multiline 설정을 이용할 수 있다.
pattern, negate, match 옵션을 설정해서 읽어들일 줄이 로그의 끝인지, 아니면 다음 줄을 계속해서 읽어들일지 결정할 수 있다.
multiline.pattern: 정규식을 이용해서 패턴을 지정한다. 패턴과 일치하는 라인이 나타나면 멀티 라인으로 식한다.
multiline.negate: false면 첫 문자가 공백일 때, true로 변경하면 첫 문자가 공백이 아닐 때 멀티 라인으로 인식한다.
multiline.match: after면 패턴이 일치하지 않는 앞쪽 라인에 붙이고, before로 변경하면 패턴이 일치하지 않는 뒤쪽 라인에 붙인다.
======================================================================================================================
filebeat.inputs:
- type: filestream
  id: my-filestream-id
  enabled: true
  paths:
    - C:/k_digital/elasticStack/elasticsearch-7.17.14/logs/*.log
  multiline.pattern: '^[[:space:]]'
  multiline.negate: false
  multiline.match: after
======================================================================================================================

모듈
모듈은 많이 사용되고 잘 알려진 시스템의 데이터를 수집하기 위한 일반적인 사항을 사전에 정의해 둔 것이다.
모듈을 잘 활용하면 복잡한 가공이 필요한 이벤트인 경우에도 최소한의 비트 설정으로 손쉽게 로그를 수집할 수 있다.
비트 온라인 문서에 Modules 라는 링크가 있으면 그 비트는 모듈을 지원한다는 의미이고 Modules 링크를 클릭해 들어가면
비트가 지원하는 모듈을 볼 수 있다. => 파일 비트는 

파일 비트의 logstash 모듈을 사용해보자.
모듈을 사용하려면 비츠 설정 파일을 변경해야 하는데 인풋은 모듈 설정 파일에서 설정하므로, 아웃풋만 수정하면 된다.

======================================================================================================================
filebeat.yml 파일의 내용
logstash 모듈 사용하기
인풋은 모듈 설정 파일에서 작성해야 하기 때문에 삭제한다.
filebeat.config.modules: 모듈의 경로를 설정한다.
${path.config}: 파일 비트의 구성파일 경로를 의미한다.
${path.home}: 파일 비트가 설치된 경로를 의미한다. ${path.config}와 같은 경로이다.
${path.data}: 파일 비트가 설치된 경로 아래의 data 폴더를 의미한다.
${path.logs}: 파일 비트가 설치된 경로 아래의 logs 폴더를 의미한다.
======================================================================================================================
filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml

setup.kibana:
  host: "localhost:5601"

output.elasticsearch:
  hosts: ["localhost:9200"]
======================================================================================================================

모듈 활성화

파일 비트를 실행할 때 modules enable을 적어주고 뒤에 활성화 할 모듈 이름을 적는다.
모듈은 기본적으로 많이 쓰는 기능들을 사전 정의했기 때문에 수정할 필요가 거의 없다. 하지만 모든 사용자의 요구 사항을
맞추기는 힘들기때문에 모듈 설정 파일을 두어 개별적인 설정이 가능하게 한다.
모듈 설정 파일은 파일 비트가 설치된 폴더 아래의 modules.d라는 폴더에 있고 비활성화된 모듈은 disabled 라는 확장명이
붙어있고, 활성되된 모듈은 disable 확장명이 빠져서 yml 이라는 확장명이 붙는다.
======================================================================================================================
filebeat.exe modules enable logstash
filebeat.exe modules enable logstash kibana elasticsearch
======================================================================================================================

활성화된 모듈 확인

======================================================================================================================
filebeat.exe modules list
======================================================================================================================

모듈 비 활성화

파일 비트를 실행할 때 modules disable을 적어주고 뒤에 활성화 할 모듈 이름을 적는다.
======================================================================================================================
filebeat.exe modules disable logstash kibana elasticsearch
======================================================================================================================

모듈 설정 파일 수정

======================================================================================================================
logstash.yml 파일의 내용
logstash 모듈은 일반 로그(log:)와 슬로우로그(slowlog:) 수집을 지원한다.
로그스태시 실행 중 발생되는 대부분의 로그는 일반 로그에 속하며, 파이프라인 내에서 과도하고 처리 시간이 지연되는 
이벤트의 경우 별도의 파일에 슬로우로그로 기록된다.
var.paths의 []내부에 입력하는 폴더와 폴더, 폴더와 파일의 구분자는 역슬래시(\)를 사용한다.
======================================================================================================================
- module: logstash
  log:
    enabled: true
    var.paths: [C:\k_digital\elasticStack\logstash-7.17.14\logs\*.log]

  slowlog:
    enabled: true
    #var.paths:
======================================================================================================================

모듈 설정을 했으므로 엘라스틱서처의 인덱스와 키바나의 대시보드를 사용할 수 있게 하기 위해 setup 명령을 실행한다.
setup이 완료되면 키바나에서 햄버거 버튼 => Analytics => Dashboard 메뉴를 클릭하고 logstash로 검색하면 	
[Filebeat Logstash] Logstash Logs ECS, [Filebeat Logstash] Slowlogs ECS 대시보드가 작성된 것을 확인할 수 있다.
[Filebeat Logstash] Logstash Logs ECS를 클릭해 보면 파일 비트가 아직 실행되지 않았기 때문에 아무것도 안나온다.

setup이 완료되면 파일 비트를 실행하고 로그스태시를 실행하면 로그스태시의 로그 파일에 로그가 쌓이면 파일 비트의
logstash 모듈이 이를 감지한다.

모니터링
모니터링은 비트가 데이터 입출력을 잘 하고 있는지 비트가 동작중인 호스트의 리소스들은 문제없는지 확인하는 기능이다.

======================================================================================================================
filebeat.yml 파일의 내용
모니터링 설정 추가
======================================================================================================================
filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml

setup.kibana:
  host: "localhost:5601"

output.elasticsearch:
  hosts: ["localhost:9200"]

monitoring.enabled: true
monitoring.elasticsearch:
  hosts: ["localhost:9200"]
======================================================================================================================

파일 비트를 실행하고 로그에 monitoring이 보이면 모니터링이 정상적으로 동작하는 것이다.
키바나 왼쪽 상단의 햄버거 버튼 클릭 => ManageMent => Stack Monitoring을 클릭하면 Beats가 보인다.

