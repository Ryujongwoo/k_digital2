키바나
비츠와 로그스태시를 이용해 데이터를 수집하고 가공했고, 엘라스틱서치에 가공된
데이터를 저장했고 저장된 데이터를 키바나를 이용해서 시각화 한다.

키바나의 대표적 시각화 기능
Discover: 데이터를 도큐먼트 단위로 탐색해 구조와 관계 등을 확인할 수 있다.
Dashboard: 그래프, 지도 등을 한곳에서 확인하면서 다양한 정보를 확인할 수 있다.
Canvas: 그래프와 이미지 등을 PPT 슬라이드 처럼 구성할 수 있다.
Maps: 위치 기반 데이터를 지도 위에 표현할 수 있다.
Visualize Library: 다양한 그래프로 데이터를 시각화 할 수 있다.

인덱스 패턴
키바나에서 시각화를 하기 위해서는 반드시 엘라스틱서치 인덱스에 연결되어야 하기 때문에 키바나를
범용적인 시각화 툴로 사용하기에는 무리가 있다.
오픈소스이면서 다양한 그래프와 지도를 지원하고 빅데이터 처리가 가능하다는 장점이 있다.
키바나는 데이터 소스를 엘라스틱서치 인덱스에서 가져오는데 이를 인덱스 패턴이라고 한다.
키바나 인덱스 패턴은 인덱스 매핑 정보 등을 키바나에서 사용하기에 적합하게 미리 캐싱해둔 것으로
여러 개의 인덱스에 대한 메타 데이터를 병합해 저장해뒀다가 검색이나 시각화 생성시 활용하게 된다.
키바나는 엘라스틱서치 인덱스에 직접 접근하지 않고 인덱스 패턴이라는 구조를 한 단계 더 거친다.
인덱스 패턴을 만드는 이유는 복수의 인덱스에 대한 매핑을 사전에 병합해두어 쿼리 생성이나 시각화에
활용할 수 있기 때문이다.

PUT kibana_index1/_doc/1
{
  "name": "kim"
}

PUT kibana_index2/_doc/1
{
  "name": "lee"
}

GET /_cat/indices
GET kibana_index1/_mapping
GET kibana_index1/_search
GET kibana_index2/_search
 
kibana_index1, kibana_index2라는 이름으로 인덱스를 2개 생성했다.
데이터가 없으면 인덱스 패턴을 만들 수 없으므로 데이터를 넣어줬다.
키바나의 시각화 기능 메뉴에 들어가보면 인덱스 패턴을 생성하지 않았으므로 kibana_index1, kibana_index2
인덱스에 키바나가 접근할 수 없으므로 어떤 작업도 키바나에서 진행할 수 없다.

키바나 인덱스 패턴 만들기
햄버거 버튼 => Management => Stack Management => Kibana => Index Patterns => Create index Pattern 버튼 클릭

==============================================================================================================

디스커버

쿼리바는 KQL(Kibana Query Language)과 루씬(Liucene) 스트링 두 가지 언어를 지원하고 특별한 설정이 없으면 기본적으로
KQL을 이용하고 루씬을 사용하려면 KQL 버튼을 클릭해서 Kibana Query Language를 off로 변경하면 된다.
KQL은 자동 완성 기능을 지원하므로 손쉽게 쿼리를 구현할 수 있다.
Cancelled : true and DestCountry : "US" 

필터바는 쿼리바와 하는 역할이 비슷하지만 필터를 개별적으로 처리할 수 있다.
Cancelled : true 결과와 DestCountry : "US" 결과를 따로 보고싶을 때 쿼리바로 구현하려면 매번 KQL 형태로 쿼리를 
작성해야 한다. 필터바는 개별적으로 필드를 제어할 수 있다.

타임 피커는 날짜, 시간 정보를 조작해 데이터를 특정한 날짜, 시간 범위 내에서 시각화 한다.
이 기능을 사용하려면 키바나 인덱스 패턴을 생성할 인덱스를 생성할 때 반드시 날짜/시간 필드를 설정해줘야 한다.

==============================================================================================================

시각화

시각화는 엘라스틱서치에 저장된 데이터를 그래프, 표, 지도 등 다양한 타입으로 보여주는 역할을 한다.
엘라스틱서치의 집계를 모르면 시각화 작업이 쉽지않다.

메트릭 집계: 합계, 평균, 개수, 최대값, 최소값 같은 통계를 집계한다.
버켓 집계: 특정 기준에 맞춰 데이터를 분리(그룹화)한다. 서브 버켓을 생성할 수 있다.
파이프라인 집계: 집계 결과를 입력으로 받아 다시 집계한다. 부모 집계와 형제 집계가 있다.

Aggregation의 Range는 사용자가 임의로 간격을 지정해서 버켓을 만드는 것으로, 데이터값의 범위를 대략이라도 
알고 있어야 사용할 수 있다.

GET kibana_sample_data_flights/_search
{
  "_source": [""], 
  "size": 0,
  "aggs": {
    "unique_aggs": {
      "terms": {
        "field": "dayOfWeek",
        "size": 7
      }
    }
  }
}

위와 같이 엘라스틱서치의 집계 기능을 실행해서 데이터값의 범위를 확인한다.

히트맵은 열분포 형태의 시각화 한다.

TSVB(Time Series Visual Builder)는 시계열 데이터를 시각화 한다.
TSVB는 다른 시각화와는 다르게 인덱스 패턴 선택을 TSVB 내부의 Panel option 탭에서 진행한다.

대시보드
대시보드는 시각화 타입들을 한 페이지에 모아 볼 수 있는 기능으로, 한 화면에서 다양한 관점으로 데이터를
보면서 분석할 수 있다. 

캔버스
캔버스는 인포그래픽 형태로 MS사의 파워포인트를 사용하는 것 처럼 데이터를 프리젠테이션 할 수 있게 해주는 툴이다.
대시보드가 강력한 기능을 제공하지만 시각화 도구로 작성된 것만 사용할 수 있어서 표현이 정형화되어 있는 느낌을
받을 수 있는데, 캔버스를 이용하면 좀더 정형화 되지 않은 자기만의 방식으로 대시보드를 원하면 사용한다.

엘라스틱서치 SQL
엘라스틱서치 SQL 문의 SELECT 문법
==============================================================================================================
SELECT select_expr [, ...]
	[ FROM table_name ]
	[ WHERE condition ]
	[ GROUP BY grouping_element [, ...] ]
	[ HAVING condition ]
	[ ORDER BY expression [ ASC | DESC ] [, ...] ]
	[ LIMIT [ count ] ]
	[ PIVOT ( aggregation_expr FOR column IN ( value [ [ AS ] alias ], [, ...] ) ) ]
==============================================================================================================

엘라스틱서치는 SQL문 지원을 위해 _sql이라는 API를 제공한다.
_sql API만 사용하면 json 형태로 보여주기 때문에 가독성 향상을 위해 format=txt라는 옵션을 붙여주는 것이 좋다.
query 옵션 내부에 실행할 SQL 명령을 입력하는데 SQL 명령이 길어서 한 줄에 입력할 수 없는 경우 큰따옴표 3개
사이에 여러줄로 입력하면 된다.

==============================================================================================================
GET kibana_sample_data_flights/_search
==============================================================================================================
POST _sql?format=txt
{
  "query": "SELECT * FROM kibana_sample_data_flights"
}

POST _sql?format=txt
{
  "query": """
      SELECT * 
        FROM "kibana_sample_data_flights"
    """
}
==============================================================================================================

==============================================================================================================
GET kibana_sample_data_flights/_mapping
==============================================================================================================
POST _sql?format=txt
{
  "query": "describe kibana_sample_data_flights"
}
==============================================================================================================

==============================================================================================================
POST _sql?format=txt
{
  "query": """
    SELECT Dest, OriginCityName, DistanceMiles 
      FROM kibana_sample_data_flights
      WHERE OriginCityName = 'Seoul'
      ORDER BY DistanceMiles DESC
      LIMIT 10
  """
}
==============================================================================================================

==============================================================================================================
위의 엘라스틱서치 SQL 명령을 엘라스틱서치 DSL로 변환
==============================================================================================================
GET kibana_sample_data_flights/_search
{
  "size": 10,
  "_source": ["Dest", "OriginCityName", "DistanceMiles"],
  "query": {
    "term": {
      "OriginCityName": {
        "value": "Seoul"
      }
    }
  },
  "sort": [
    {
      "DistanceMiles": {
        "order": "desc"
      }
    }
  ]
}
==============================================================================================================

맵스
위치 정보가 포함된 데이터를 지도에 올려 시각화 한다.

엘라스틱서치가 제공하는 벡터 레이어는 전 세계 행정구역 정보를 https://maps.elastic.co/ 사이트에서 확인할 수 있다.
우리나라에 대해서는 South Korea Province(시도), South Korea Municipalities(시구군)를 제공한다.
벡터 레이이 정보를 다운 받으려면 다운 받을 벡터 레이어를 선택하고 Download GeoJSON 버튼을 클릭하고 새 창에
벡터 레이어 정보가 열리면 ctrl + s를 눌러서 다운 받으면 된다.

서울시 우편번호 벡터 레이어 정보가 저장된 GeoJSON 파일(TL_KODIS_BAS_11.geojson) 다운로드 받는다.
https://github.com/onlybooks/elasticstack/blob/main/ch08/06/TL_KODIS_BAS_11.geojson

구글이 제공하는 인공위성 맵을 사용하려면 키바나 설정 파일(kibana.yml)을 수정해야 한다.
==============================================================================================================
kibana.yml 파일의 내용
==============================================================================================================
map.tilemap.url:
  "https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}"
==============================================================================================================

